.TH BEAK 1
.SH NAME
beak \- a backup-mirror-share-rotation-pruning tool

.SH SYNOPSIS
.B beak [command] {options} {origin|storage|rule} {origin|storage|rule}

.SH DESCRIPTION

The beak backup tool takes an \fBorigin\fR directory (/home/you/Work)
and stores it into a backup \fBstorage\fR. A storage can be a
filesystem directory: \fB/backups/WorkBackups\fR or an rclone remote:
\fBbackups_crypt:\fR or rsync remote
\fBbackup@192.168.1.2/backups/Work\fR. Some beak commands take as
argument a \fBrule\fR which is a shorthand for a specific origin and
storages as defined in the config file.

A backup is a collection of archive files and an index file. The index
specifies the content inside the archive files. The index has a
timestamp and a hash of the meta data, however the timestamp is NOT
the timestamp when you did the backup, it is the timestamp of the last
modified file/dir in the origin directory.

Beak trusts the timestamps in your filesystem.

For example: % beak store /home/you/Work /media/you/USBDrive
             % beak restore /media/youUSBDrive@1 /home/you/Work
             % beak config
             % beak push work: s3_work_crypt:
             % beak mount /media/you/USBDrive@0 /home/you/Lookback
             % beak importmedia DirWithGphoto2ImportedPictures /home/you/MediaBackup

.SH COMMANDS

beak store <origin> <storage>



Eg. \fBbeak store /home/you/Work /media/you/USBDrive\fR

beak restore <storage> <origin>

beak importmedia <dir_with_media> <origin>

beak indexmedia <origin>

beak shell {<rule>|<storage>}

beak mount <storage> <dir>       beak bmount <origin> <dir>

beak fsck <storage>

beak push <rule>

beak pull <rule>

beak diff {<storage>|<origin>|<rule>} {<storage>|<origin>|<rule>}

beak stat {dir|<storage>|<origin>|<rule>}

beak config

beak status {<rule>|<storage>}

beak prune {<rule>|<storage>}

.SH OPTIONS
.TP
.BR \-i " " PATTERN
Only include files and directories with paths that match the pattern.

.TP
.BR \-x " " PATTERN
Exclude files and directories with paths that match the pattern.

.TP
.BR \-p " " DEPTH
Trigger tar generation at this depth, even if the trigger size has not been reached.
The default is 2, aka the first subdirectory level below the source directory.

.TP
.BR \-ta " " SIZE
Set the target tar size.

.TP
.BR \-tr " " SIZE
Set the tar trigger size.

.TP
.BR \-tx " " PATTERN
Trigger tar generation when the path of the directory matches the pattern.

.TP
.BR \-f
Run in foreground, ie do not start daemon.

.TP
.BR \-d
Run in debug mode foreground, a lot of output.

.SH EXAMPLES
.TP

Store all all virtual tar files in the source directory, ie no subdirectories.

% beak store -d 1 -ta 50M -tr 1T /home/you/Work WorkArchive

.TP
Tar the dev directory but exclude file/paths that contains the text "shm". Which are the share memory buffers, not suitable for archiving.

% beak mount -x shm /dev Test

.SH AUTHOR
Written by Fredrik Öhrström.

.SH COPYRIGHT
Copyright \(co 2016-2017 Fredrik Öhrström.
.br
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
.br
There is NO WARRANTY, to the extent permitted by law.
